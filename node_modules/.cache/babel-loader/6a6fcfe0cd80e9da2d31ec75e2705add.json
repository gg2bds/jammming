{"ast":null,"code":"const clientId = '4ad1cd926830413a8134b1692aa00b1d';\nconst redirectUri = 'http://localhost:3000';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["C:/Users/s2017/jammming/src/util/Spotify.js"],"sourcesContent":["const clientId = '4ad1cd926830413a8134b1692aa00b1d';\r\nconst redirectUri = 'http://localhost:3000'\r\nlet accessToken;\r\n\r\nconst Spotify ={\r\n\tgetAccessToken(){\r\n\t\tif(accessToken){\r\n\t\t\treturn accessToken;\r\n\t\t}\r\n\t\t\r\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n\t\tconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\t\t\r\n\t\tif(accessTokenMatch && expiresInMatch){\r\n\t\t\taccessToken = accessTokenMatch[1];\r\n\t\t\tconst expiresIn = Number(expiresInMatch[1]);\r\n\t\t\twindow.setTimeout(() => accessToken ='', expiresIn *1000);\r\n\t\t\twindow.history.pushState('Access Token', null, '/');\r\n\t\t\treturn accessToken;\r\n\t\t}else{\r\n\t\t\tconst accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n\t\t\twindow.location = accessUrl;\r\n\t\t}\r\n\t},\r\n\t\r\n\tsearch(term){\r\n\t\tconst accessToken = Spotify.getAccessToken();\r\n\t\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{ headers:{\r\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\r\n\t\t\t}\r\n\t\t}).then(response =>{\r\n\t\t\treturn response.json();\r\n\t\t}).then(jsonResponse =>{\r\n\t\t\tif(!jsonResponse.tracks){\r\n\t\t\t\treturn[];\r\n\t\t\t}\r\n\t\t\treturn jsonResponse.tracks.items.map(track => ({\r\n\t\t\t\tid: track.id,\r\n\t\t\t\tname: track.name,\r\n\t\t\t\tartist: track.artists[0].name,\r\n\t\t\t\talbum: track.album.name,\r\n\t\t\t\turi: track.uri\r\n\t\t\t}));\r\n\t\t});\r\n\t},\r\n\t\r\n\tsavePlaylist(name, trackUris){\r\n\t\tif(!name || !trackUris.length){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tconst accessToken = Spotify.getAccessToken();\r\n\t\tconst headers= {Authorization: `Bearer ${accessToken}`};\r\n\t\tlet userId;\r\n\t\t\r\n\t\treturn fetch('https://api.spotify.com/v1/me',{headers: headers}\r\n\t\t).then(response => response.json()\r\n\t\t).then(jsonResponse =>{\r\n\t\t\tuserId = jsonResponse.id;\r\n\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n\t\t\t\t{\r\n\t\t\t\t\theaders:headers,\r\n\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\tbody: JSON.stringify({name:name})\r\n\t\t\t\t}).then(response => response.json()\r\n\t\t\t\t).then(jsonResponse =>{\r\n\t\t\t\t\tconst playlistId = jsonResponse.id;\r\n\t\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n\t\t\t\t\t\theaders:headers,\r\n\t\t\t\t\t\tmethod: 'POST',\r\n\t\t\t\t\t\tbody: JSON.stringify({uris: trackUris})\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport default Spotify;"],"mappings":"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"},"metadata":{},"sourceType":"module"}